{"version":3,"sources":["actions/actionTypes.ts","reducers/canvas.ts","reducers/onset.ts","reducers/settings.ts","reducers/index.ts","actions/actionCreators.ts","components/OnsetGraph.js","components/OnsetScaler.js","components/ThresholdController.js","components/SettingsOverlay.js","lib/OnsetDetection.ts","lib/helpers.js","components/Button.js","components/ControlPanel.js","lib/AudioEngine/WebAudioEngine.ts","components/OnsetDetectionController.js","views/SpectralBeatMainView.js","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["ActionTypes","actionTypes","SET_CANVAS_COLOR","initialState","currentColor","canvas","state","action","type","__assign","color","SET_ONSET_DATA","SET_ONSET_DETECTION_RUNNING","SET_ONSET_GRAPH_SCALE","SET_THRESHOLD","TOGGLE_AUTO_THRESHOLD_IS_ACTIVE","TOGGLE_ONSET_DETECTION_RUNNING","onset_initialState","autoThresholdIsActive","graphScale","isRunning","onsetData","isPeak","threshold","value","userThreshold","onset","onset_assign","SET_SETTINGS_VISIBILITY","TOGGLE_SETTINGS_VISIBILITY","settings_initialState","settingsAreVisible","settings","settings_assign","reducers","Object","redux","onsetDetection","actionCreators_SET_SETTINGS_VISIBILITY","actionCreators_SET_CANVAS_COLOR","actionCreators_TOGGLE_SETTINGS_VISIBILITY","actionCreators_TOGGLE_AUTO_THRESHOLD_IS_ACTIVE","actionCreators_SET_ONSET_DETECTION_RUNNING","actionCreators_SET_ONSET_DATA","actionCreators_SET_THRESHOLD","actionCreators_SET_ONSET_GRAPH_SCALE","actionCreators_setCanvasColor","actionCreators_setOnsetGraphScale","mapDispatchToProps","setOnsetGraphScale","actions","OnsetGraph","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","startLoop","componentWillUnmount","stopLoop","shouldComponentUpdate","nextProps","nextState","canvasWidth","createDataArrays","onsetValues","shift","push","thresholdValues","peakValues","frameId","window","requestAnimationFrame","loop","scalingTimer","setInterval","maxValue","Math","max","apply","toConsumableArray","newGraphScale","canvasHeight","drawCanvas","cancelAnimationFrame","clearInterval","_this$props","onsetCanvasCtx","getContext","fillStyle","fillRect","forEach","i","length","Array","from","_","_this2","_this$props2","react_default","a","createElement","style","height","opacity","width","ref","Component","connect","PropTypes","number","isRequired","func","OnsetScaler","rc_slider_es","min","step","onChange","vertical","alignItems","display","paddingRight","onsetGraphScale","setUserThreshold","toggleAutoThresholdIsActive","ThresholdController","handleThresholdChange","parseFloat","backgroundColor","borderColor","borderRadius","borderStyle","borderWidth","cornerRadius","flexDirection","justifyContent","padding","htmlFor","marginBottom","name","checked","disabled","SettingsOverlay","windowWidth","windowHeight","round","components_OnsetGraph","withSizes","_ref","OnsetDetection","sampleRate","bufferSize","frequencyBinCount","bufferDuration","onsetValueCount","shouldCalculateThreshold","run","spectrum","timeStamp","previousSpectrum","smoothingValues","linearSpectrum","map","decibelToLinear","flux","computeSpectralFlux","smoothedFlux","subarray","smoothingWindowLength","reduce","agg","cur","set","mean","currentIsPeak","checkForRecentPeak","onOnsetDetected","onOnsetResultData","console","error","onsetBufferDurationS","Float32Array","prototype","setThreshold","prev","diff","sqrt","pow","arr","isLocalMaximum","isAboveThreshold","numArray","b","lib_OnsetDetection","toggleFullScreen","doc","document","docEl","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancelFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","styles","button","fontSize","textAlign","ControlButton","label","onClick","ControlPanel","onClickStartStop","onClickSettings","margin","position","Button","BUFFER_SOURCE_DEBUG","AudioEngine_WebAudioEngine","WebAudioEngine","targetBufferSize","audioProcessingCallback","audioProcessingEvent","dataArray","analyserNode","getFloatFrequencyData","onFloatFrequencyData","CrossBrowserAudioContext","AudioContext","webkitAudioContext","audioContext","latencyHint","createAnalyser","processingNode","createScriptProcessor","onaudioprocess","gainNode","createGain","gainValue","gain","setValueAtTime","currentTime","defineProperty","start","inputNode","_a","createBufferSource","createStreamSource","_b","sent","resume","stop","disconnect","removeInputNodeIfNecessary","suspend","undefined","destination","Promise","mediaStreamConstraints","audio","echoCancellation","noiseSuppression","navigator","mediaDevices","getUserMedia","mediaStream","createMediaStreamSource","getAudioBufferFromURL","audioBuffer","bufferSourceNode","buffer","url","fetch","arrayBuffer","resolve","reject","decodeAudioData","OnsetDetectionController","audioEngine","desiredBufferSize","refactoryTime","refractoryTimeMS","callback","lastDetectionTimeStamp","setNewRandomColor","prevProps","onsetDetectionIsRunning","startAudioProcessing","stopAudioProcessing","setOnsetData","setOnsetDetectionRunning","toggleSettingsVisibility","components_ControlPanel","dispatch","setCanvasColor","floor","random","getRandomColor","SpectralBeatMainView","objectSpread","main","fullscreenButtonWrapper","src","fullscreenButton","settingsContainer","components_SettingsOverlay","controllerContainer","components_OnsetDetectionController","fontFamily","left","top","setSettingsVisibility","visible","store","src_App","_super","App","__extends","render","react","es","views_SpectralBeatMainView","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","react_dom","getElementById","URL","toString","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76fc42c3.chunk.js","sourcesContent":["enum ActionTypes {\n\t// SETTINGS\n\tSET_SETTINGS_VISIBILITY,\n\tTOGGLE_SETTINGS_VISIBILITY,\n\t\n\t// CANVAS\n\tSET_CANVAS_COLOR,\n\tTOGGLE_CANVAS_COLOR,\n\t\n\t// ONSET/THRESHOLD\n\tSET_ONSET_DETECTION_RUNNING,\n\tTOGGLE_ONSET_DETECTION_RUNNING,\n\tSET_ONSET_DATA,\n\tSET_ONSET_GRAPH_SCALE,\n\tSET_THRESHOLD,\n\tTOGGLE_AUTO_THRESHOLD_IS_ACTIVE,\n}\n\nexport default ActionTypes;\n","import ActionTypes from '../actions/actionTypes';\n\nconst { SET_CANVAS_COLOR } = ActionTypes;\n\ninterface ICanvasState {\n\tcurrentColor: string\n}\n\nconst initialState: ICanvasState = {\n\tcurrentColor: 'black',\n};\n\nconst reducer = (state: ICanvasState = initialState, action: any = {}) => {\n\tswitch (action.type) {\n\t\tcase SET_CANVAS_COLOR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentColor: action.color,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;","import ActionTypes from '../actions/actionTypes';\n\nconst {\n\tSET_ONSET_DATA,\n\tSET_ONSET_DETECTION_RUNNING,\n\tSET_ONSET_GRAPH_SCALE,\n\tSET_THRESHOLD,\n\tTOGGLE_AUTO_THRESHOLD_IS_ACTIVE,\n\tTOGGLE_ONSET_DETECTION_RUNNING\n} = ActionTypes;\n\n// ToDo: move to appropriate file\nexport interface IOnsetData {\n\tisPeak: boolean\n\tthreshold: number\n\tvalue: number\n}\n\ninterface IOnsetState {\n\tautoThresholdIsActive: boolean\n\tgraphScale: number\n\tisRunning: boolean\n\tonsetData: IOnsetData\n\tuserThreshold: number\n}\n\nconst initialState: IOnsetState = {\n\tautoThresholdIsActive: true,\n\tgraphScale: 10000000,\n\tisRunning: false,\n\tonsetData: {\n\t\tisPeak: false,\n\t\tthreshold: 0,\n\t\tvalue: 0,\n\t},\n\tuserThreshold: 0,\n};\n\nconst reducer = (state: IOnsetState = initialState, action: any = {}) => {\n\tswitch (action.type) {\n\t\tcase SET_ONSET_GRAPH_SCALE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tgraphScale: action.graphScale\n\t\t\t}\n\t\tcase SET_ONSET_DETECTION_RUNNING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisRunning: action.isRunning,\n\t\t\t};\n\t\tcase TOGGLE_ONSET_DETECTION_RUNNING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisRunning: !state.isRunning,\n\t\t\t};\n\t\tcase SET_ONSET_DATA:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tonsetData: {\n\t\t\t\t\t...state.onsetData,\n\t\t\t\t\t...action.onsetData,\n\t\t\t\t},\n\t\t\t};\n\t\tcase TOGGLE_AUTO_THRESHOLD_IS_ACTIVE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tautoThresholdIsActive: !state.autoThresholdIsActive,\n\t\t\t};\n\t\tcase SET_THRESHOLD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserThreshold: action.threshold\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;","import ActionTypes from '../actions/actionTypes';\n\nconst {\n\tSET_SETTINGS_VISIBILITY,\n\tTOGGLE_SETTINGS_VISIBILITY,\n} = ActionTypes;\n\ninterface ISettingsState {\n\tsettingsAreVisible: boolean\n}\n\nconst initialState: ISettingsState = {\n\tsettingsAreVisible: false,\n};\n\nconst reducer = (state = initialState, action: any = {}) => {\n\tswitch (action.type) {\n\t\tcase SET_SETTINGS_VISIBILITY: {\n\t\t\treturn {...state, settingsAreVisible: action.settingsAreVisible }\n\t\t}\n\t\tcase TOGGLE_SETTINGS_VISIBILITY: {\n\t\t\treturn { ...state, settingsAreVisible: !state.settingsAreVisible };\n\t\t}\n\t\tdefault: return state;\n\t}\n}\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport canvas from './canvas';\nimport onsetDetection from './onset';\nimport settings from './settings';\n\nexport default combineReducers({\n\tcanvas,\n\tonsetDetection,\n\tsettings,\n});\n","import { IOnsetData } from '../reducers/onset'; \nimport ActionTypes from './actionTypes';\n\nconst { \n\tSET_SETTINGS_VISIBILITY,\n\tSET_CANVAS_COLOR,\n\tTOGGLE_SETTINGS_VISIBILITY,\n\tTOGGLE_AUTO_THRESHOLD_IS_ACTIVE,\n\tTOGGLE_ONSET_DETECTION_RUNNING,\n\tSET_ONSET_DETECTION_RUNNING,\n\tSET_ONSET_DATA,\n\tSET_THRESHOLD,\n\tSET_ONSET_GRAPH_SCALE \n} = ActionTypes;\n\nexport const setSettingsVisibility = (settingsAreVisible: boolean) => ({\n\tsettingsAreVisible,\n\ttype: SET_SETTINGS_VISIBILITY,\n});\n\nexport const setCanvasColor = (color: string) => ({\n\tcolor,\n\ttype: SET_CANVAS_COLOR,\n});\n\nexport const toggleSettingsVisibility = () => ({\n\ttype: TOGGLE_SETTINGS_VISIBILITY,\n});\n\nexport const toggleOnsetDetectionRunning = () => ({\n\ttype: TOGGLE_ONSET_DETECTION_RUNNING,\n});\n\nexport const setOnsetDetectionRunning = (isRunning: boolean) => ({\n\tisRunning,\n\ttype: SET_ONSET_DETECTION_RUNNING,\n});\n\nexport const setOnsetData = (onsetData: IOnsetData) => ({\n\tonsetData,\n\ttype: SET_ONSET_DATA,\n});\n\nexport const setOnsetGraphScale = (graphScale: number) => ({\n\tgraphScale,\n\ttype: SET_ONSET_GRAPH_SCALE\n});\n\nexport const setThreshold = (threshold: number) => ({\n\tthreshold,\n\ttype: SET_THRESHOLD,\n});\n\nexport const toggleAutoThresholdIsActive = () => ({\n\ttype: TOGGLE_AUTO_THRESHOLD_IS_ACTIVE,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\nconst propTypes = {\n    canvasHeight: PropTypes.number.isRequired,\n    canvasWidth: PropTypes.number.isRequired,\n    graphScale: PropTypes.number.isRequired,\n    onsetData: PropTypes.shape({\n        isPeak: PropTypes.bool.isRequired,\n        threshold: PropTypes.number.isRequired,\n        value: PropTypes.number.isRequired,\n    }).isRequired,\n    setOnsetGraphScale: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    graphScale: state.onsetDetection.graphScale,\n    onsetData: state.onsetDetection.onsetData,\n});\n\nconst mapDispatchToProps = {\n    setOnsetGraphScale: actions.setOnsetGraphScale,\n};\n\nclass OnsetGraph extends Component {\n    constructor(props) {\n        super(props);\n        const { canvasWidth } = props;\n        this.createDataArrays(canvasWidth);\n    }\n\n    createDataArrays(length) {\n        this.onsetValues = Array.from({ length }, _ => 0);\n        this.thresholdValues = Array.from({ length }, _ => 0);\n        this.peakValues = Array.from({ length }, _ => false);\n    }\n\n    componentDidMount = () => {\n        this.startLoop();\n    };\n\n    componentWillUnmount = () => {\n        this.stopLoop();\n    };\n\n    shouldComponentUpdate = (nextProps, nextState) => {\n        const { onsetData, canvasWidth } = nextProps;\n\n        if (this.props.canvasWidth !== canvasWidth) {\n            this.createDataArrays(canvasWidth);\n            return true;\n        }\n\n        const { value, threshold, isPeak } = onsetData;\n\n        this.onsetValues.shift();\n        this.onsetValues.push(onsetData.value);\n\n        this.thresholdValues.shift();\n        this.thresholdValues.push(onsetData.threshold);\n\n        this.peakValues.shift();\n        this.peakValues.push(onsetData.isPeak);\n\n        return false;\n    };\n\n    startLoop = () => {\n        if (!this.frameId) {\n            this.frameId = window.requestAnimationFrame(this.loop);\n        }\n        if (!this.scalingTimer) {\n            this.scalingTimer = setInterval(() => {\n                const maxValue = Math.max(...this.onsetValues);\n                const newGraphScale = this.props.canvasHeight / maxValue;\n                this.props.setOnsetGraphScale(newGraphScale);\n            }, 2500);\n        }\n    }\n\n    loop = () => {\n        this.drawCanvas();\n        this.frameId = window.requestAnimationFrame(this.loop);\n    }\n\n    stopLoop = () => {\n        window.cancelAnimationFrame(this.frameId);\n        clearInterval(this.scalingTimer);\n    }\n\n    drawCanvas = () => {\n        const { canvasHeight, canvasWidth, graphScale } = this.props;\n        const onsetCanvasCtx = this.canvas.getContext(\"2d\");\n\n        onsetCanvasCtx.fillStyle = \"grey\";\n        onsetCanvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n        onsetCanvasCtx.fillStyle = \"blue\";\n        this.thresholdValues.forEach((value, i) => {\n            onsetCanvasCtx.fillRect(i, canvasHeight, 1, -value * graphScale);\n        });\n\n        onsetCanvasCtx.fillStyle = \"white\";\n        this.onsetValues.forEach((value, i) => {\n            onsetCanvasCtx.fillRect(i, canvasHeight, 1, -value * graphScale);\n        });\n\n        onsetCanvasCtx.fillStyle = \"black\";\n        this.peakValues.forEach((value, i) => {\n            if (value === true) {\n                onsetCanvasCtx.fillRect(i, canvasHeight, 1, -canvasHeight);\n            }\n        });\n    }\n\n    render() {\n        const { canvasHeight, canvasWidth } = this.props;\n        return (\n            <div style={{\n                height: canvasHeight,\n                opacity: 0.5,\n                width: canvasWidth,\n            }}>\n                <canvas\n                    ref={canvas => {\n                        this.canvas = canvas;\n                    }}\n                    width={canvasWidth}\n                    height={canvasHeight}\n                />\n            </div>\n        );\n    }\n}\n\nOnsetGraph.propTypes = propTypes;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OnsetGraph);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport * as actions from '../actions';\n\nconst propTypes = {\n    height: PropTypes.number.isRequired,\n    onsetGraphScale: PropTypes.number.isRequired,\n    setOnsetGraphScale: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    onsetGraphScale: state.onsetDetection.graphScale,\n});\n\nconst mapDispatchToProps = {\n    setOnsetGraphScale: actions.setOnsetGraphScale,\n};\n\n\nclass OnsetScaler extends Component {\n    render() {\n        const { graphScale, setOnsetGraphScale, height } = this.props;\n\n        return (\n            <Slider\n                min={100}\n                max={1000000}\n                step={0.00001}\n                onChange={(value) => {\n                    setOnsetGraphScale(value);\n                }}\n                vertical\n                style={{\n                    alignItems: 'stretch',\n                    display: 'flex',\n                    height: height,\n                    paddingRight: '2em',\n                }}\n            />\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OnsetScaler);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport * as actions from '../actions';\n\nconst propTypes = {\n    autoThresholdIsActive: PropTypes.bool.isRequired,\n    setUserThreshold: PropTypes.func.isRequired,\n    toggleAutoThresholdIsActive: PropTypes.func.isRequired,\n    userThreshold: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    autoThresholdIsActive: state.onsetDetection.autoThresholdIsActive,\n    userThreshold: state.onsetDetection.userThreshold,\n});\n\n\nconst mapDispatchToProps = {\n    setUserThreshold: actions.setThreshold,\n    toggleAutoThresholdIsActive: actions.toggleAutoThresholdIsActive,\n};\n\n\n\nclass ThresholdController extends Component {\n    handleThresholdChange = value => {\n        this.props.setUserThreshold(parseFloat(value));\n    }\n\n    render() {\n        const { autoThresholdIsActive, userThreshold, toggleAutoThresholdIsActive } = this.props;\n        return (\n            <div\n                style={{\n                    alignItems: 'center',\n                    backgroundColor: 'blue',\n                    borderColor: '#CCCCCC',\n                    borderRadius: 7,\n                    borderStyle: 'solid',\n                    borderWidth: 4,\n                    cornerRadius: 3,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    opacity: 0.75,\n                    padding: '1em',\n                }}\n            >\n                <div\n                    htmlFor='manualThreshold'\n                    style={{\n                        marginBottom: '0.7em'\n                    }}\n                >\n                    <input\n                        type='checkbox' \n                        name='manualThreshold'\n                        checked={!autoThresholdIsActive}\n                        onChange={toggleAutoThresholdIsActive}\n                    />\n                    Manual Threshold\n                </div>\n\n\n                <Slider\n                    min={0}\n                    max={0.02}\n                    step={0.00001}\n                    onChange={this.handleThresholdChange}\n                    disabled={autoThresholdIsActive}\n                />\n\n            </div>\n        );\n    }\n}\n\nThresholdController.propTypes = propTypes;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThresholdController);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport OnsetGraph from './OnsetGraph';\nimport OnsetScaler from './OnsetScaler';\nimport ThresholdController from './ThresholdController';\nimport withSizes from 'react-sizes'\n\n\nclass SettingsOverlay extends Component {\n    render() {\n        const { windowWidth, windowHeight } = this.props;\n        const canvasHeight = Math.round(windowHeight / 3);\n        const canvasWidth = Math.round(windowWidth);\n        return (\n            <div style={{\n                alignItems: 'center',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center',\n                marginBottom: '1em'\n            }}>\n                {/* <OnsetScaler height={canvasHeight} /> */}\n                <OnsetGraph\n                    canvasHeight={canvasHeight}\n                    canvasWidth={canvasWidth}\n                />\n                {/* <ThresholdController /> */}\n            </div>\n        );\n    }\n}\n\nSettingsOverlay.props = {\n    windowHeight: PropTypes.number.isRequired,\n    windowWidth: PropTypes.number.isRequired,\n};\n\nconst mapSizesToProps = ({ width, height }) => ({\n    windowHeight: height,\n    windowWidth: width,\n})\n\n\nexport default withSizes(mapSizesToProps)(SettingsOverlay);\n","interface IOnsetResultData {\n\tisPeak: boolean;\n\tthreshold: number;\n\tvalue: number;\n}\n\nclass OnsetDetection {\n\tprivate static readonly onsetBufferDurationS = 2.5;\n\tprivate static readonly smoothingWindowLength = 2;\n\n\tpublic onOnsetResultData?: ((data: IOnsetResultData) => void);\n\tpublic onOnsetDetected?: ((timeStamp: number) => void);\n\n\tprivate previousSpectrum: Float32Array;\n\tprivate onsetValues: Float32Array;\n\n\tprivate shouldCalculateThreshold = true;\n\tprivate threshold: number = 0;\n\n\tconstructor(sampleRate: number, bufferSize: number, frequencyBinCount: number) {\n\t\tthis.onsetValues = (() => {\n\t\t\tconst bufferDuration = bufferSize / sampleRate;\n\t\t\tconst onsetValueCount = Math.round(OnsetDetection.onsetBufferDurationS / bufferDuration);\n\t\t\treturn new Float32Array(onsetValueCount);\n\t\t})()\n\t\tthis.previousSpectrum = new Float32Array(frequencyBinCount);\n\t}\n\n\n\tpublic setThreshold(value?: number) {\n\t\tif (!value) {\n\t\t\tthis.shouldCalculateThreshold = true;\n\t\t} else {\n\t\t\tthis.threshold = value;\n\t\t\tthis.shouldCalculateThreshold = false;\n\t\t}\n\t}\n\n\tprivate run = (spectrum: Float32Array, timeStamp: number) => {\n\t\tif (spectrum.length !== this.previousSpectrum.length) {\n\t\t\tconsole.error(`previous ${this.previousSpectrum.length} and current ${spectrum.length} spectrum don't have the same length`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst linearSpectrum = spectrum.map(decibelToLinear);\n\n\t\tconst flux = computeSpectralFlux(\n\t\t\tthis.previousSpectrum,\n\t\t\tlinearSpectrum\n\t\t);\n\n\t\tconst smoothedFlux = (() => {\n\t\t\tconst smoothingValues = this.onsetValues.subarray(\n\t\t\t\tthis.onsetValues.length - OnsetDetection.smoothingWindowLength,\n\t\t\t\tthis.onsetValues.length\n\t\t\t);\n\t\t\tconst smoothingValuesSum = smoothingValues.reduce((agg, cur) => agg + cur, 0);\n\t\t\treturn (smoothingValuesSum + flux) / (smoothingValues.length + 1);\n\t\t})();\n\n\t\tthis.previousSpectrum.set(linearSpectrum);\n\t\tthis.onsetValues.set(this.onsetValues.subarray(1)); // shift\n\t\tthis.onsetValues[this.onsetValues.length - 1] = smoothedFlux; // push\n\n\t\tif (this.shouldCalculateThreshold) {\n\t\t\tthis.threshold = mean(this.onsetValues);\n\t\t}\n\n\t\tconst currentIsPeak = checkForRecentPeak(this.onsetValues, this.threshold);\n\t\tif (currentIsPeak) {\n\t\t\tif (this.onOnsetDetected != null) {\n\t\t\t\tthis.onOnsetDetected(timeStamp);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.onOnsetResultData) { return };\n\t\tthis.onOnsetResultData({\n\t\t\tisPeak: currentIsPeak,\n\t\t\tthreshold: this.threshold,\n\t\t\tvalue: this.onsetValues[this.onsetValues.length - 1]\n\t\t});\n\t};\n}\n\nconst computeSpectralFlux = (previousSpectrum: Float32Array, spectrum: Float32Array): number => {\n\tconst flux = spectrum.reduce((prev, cur, i) => {\n\t\tlet diff = previousSpectrum[i] - cur;\n\t\tif (diff < 0) {\n\t\t\treturn prev;\n\t\t}\n\t\tdiff *= diff;\n\t\treturn prev + diff;\n\t}, 0);\n\n\treturn Math.sqrt(flux) / spectrum.length;\n};\n\nfunction decibelToLinear(value: number): number {\n\treturn Math.pow(10, value / 20)\n}\n\nconst checkForRecentPeak = (arr: Float32Array, threshold: number) => {\n\tconst isLocalMaximum =\n\t\tarr[arr.length - 3] < arr[arr.length - 2] &&\n\t\tarr[arr.length - 2] > arr[arr.length - 1];\n\tconst isAboveThreshold = arr[arr.length - 2] > threshold;\n\treturn isLocalMaximum && isAboveThreshold;\n};\n\nconst mean = (numArray: Float32Array) => {\n\tconst sum = numArray.reduce((a, b) => a + b, 0);\n\treturn sum / numArray.length;\n};\n\nconst median = (numArray: Float32Array) => {\n\tconst sortedNumArray = numArray.sort((a, b) => a - b);\n\tconst half = Math.floor(sortedNumArray.length / 2);\n\n\tif (sortedNumArray.length & 1) {\n\t\treturn sortedNumArray[half];\n\t}\n\treturn (sortedNumArray[half - 1] + sortedNumArray[half]) / 2.0;\n};\n\nexport default OnsetDetection;\n","// tslint:disable:no-console\n\nexport function getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nexport function toggleFullScreen() {\n    const doc = window.document;\n    const docEl = doc.documentElement;\n\n    const requestFullScreen = docEl.requestFullscreen \n        || docEl.mozRequestFullScreen \n        || docEl.webkitRequestFullScreen \n        || docEl.msRequestFullscreen;\n        \n    const cancelFullScreen = doc.exitFullscreen \n        || doc.mozCancelFullScreen \n        || doc.webkitExitFullscreen \n        || doc.msExitFullscreen;\n\n    const fullscreenElement = doc.fullscreenElement \n        || doc.mozFullScreenElement \n        || doc.webkitFullscreenElement \n        || doc.msFullscreenElement\n\n    if (!fullscreenElement) {\n        if (requestFullScreen) {\n            requestFullScreen.call(docEl);\n        }\n    } else {\n        if (cancelFullScreen) {\n            cancelFullScreen.call(document);\n        }\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ControlButton = ({ label, onClick }) => (\n    <div style={styles.button} onClick={onClick}>\n        {label}\n    </div>\n);\n\nconst styles = {\n    button: {\n        backgroundColor: 'black',\n        borderColor: 'white',\n        borderRadius: 7,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        color: 'white',\n        cornerRadius: 3,\n        fontSize: 18,\n        opacity: 0.5,\n        padding: '0.5em',\n        textAlign: 'center',\n        width: 100,\n    },\n};\n\nControlButton.propTypes = {\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default ControlButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ControlButton from './Button';\n\nconst propTypes = {\n    isRunning: PropTypes.bool.isRequired,\n    onClickSettings: PropTypes.func.isRequired,\n    onClickStartStop: PropTypes.func.isRequired,\n};\n\nclass ControlPanel extends Component {\n    render() {\n        const { onClickStartStop, onClickSettings, isRunning } = this.props;\n        return (\n            <div\n                style={{\n                    alignItems: 'center',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-around',\n                    margin: '1em',\n                    position: 'relative',\n                }}\n            >\n                <ControlButton\n                    label='Graph'\n                    onClick={onClickSettings}\n                />\n\n                <ControlButton\n                    label={isRunning ? \"Stop\" : \"Start\"}\n                    onClick={() => onClickStartStop(!isRunning) }\n                />\n\n            </div>\n        );\n    }\n}\n\nControlPanel.propTypes = propTypes;\n\nexport default ControlPanel;\n","const BUFFER_SOURCE_DEBUG = false;\n\nclass WebAudioEngine {\n\tpublic onFloatFrequencyData?: (data: Float32Array, timeStamp: number) => void;\n\tpublic get frequencyBinCount(): number { return this.analyserNode.frequencyBinCount; }\n\tpublic get sampleRate(): number { return this.audioContext.sampleRate; }\n\tpublic get bufferSize(): number { return this.processingNode.bufferSize; }\n\n\tprivate audioContext: AudioContext;\n\tprivate inputNode?: AudioBufferSourceNode | MediaStreamAudioSourceNode;\n\tprivate analyserNode: AnalyserNode;\n\tprivate processingNode: ScriptProcessorNode;\n\tprivate gainNode: GainNode;\n\n\tconstructor(targetBufferSize: number | undefined) {\n\t\tconst options: AudioContextOptions = { latencyHint: \"interactive\" };\n\t\tconst CrossBrowserAudioContext = (window as any).AudioContext || (window as any).webkitAudioContext;\n\t\tthis.audioContext = new CrossBrowserAudioContext(options);\n\t\tthis.analyserNode = this.audioContext.createAnalyser();\n\t\tthis.processingNode = this.audioContext.createScriptProcessor(targetBufferSize);\n\t\tthis.processingNode.onaudioprocess = this.audioProcessingCallback;\n\t\tthis.gainNode = this.audioContext.createGain();\n\t\tconst gainValue = BUFFER_SOURCE_DEBUG ? 1 : 0;\n\t\tthis.gainNode.gain.setValueAtTime(gainValue, this.audioContext.currentTime);\n\t}\n\n\tpublic async start() {\n\t\tif (!this.inputNode) {\n\t\t\tconst createSource = BUFFER_SOURCE_DEBUG ? createBufferSource : createStreamSource;\n\t\t\tthis.inputNode = await createSource(this.audioContext);\n\t\t}\n\t\tthis.connect();\n\t\tthis.audioContext.resume();\n\t}\n\n\tpublic stop() {\n\t\tthis.disconnect();\n\t\tthis.removeInputNodeIfNecessary();\n\t\tthis.audioContext.suspend();\n\t}\n\n\tprivate removeInputNodeIfNecessary() {\n\t\t// in order to be able to stop and restart correctly\n\t\t// we need to kill (and later recreate) the input node\n\t\tif (!!(window as any).webkitAudioContext) {\n\t\t\tthis.inputNode = undefined;\n\t\t}\n\t}\n\n\tprivate connect() {\n\t\tif (this.inputNode) {\n\t\t\tthis.inputNode.connect(this.gainNode);\n\t\t\tthis.inputNode.connect(this.analyserNode);\n\t\t\tthis.inputNode.connect(this.processingNode);\n\t\t}\n\t\tthis.analyserNode.connect(this.gainNode); // chromes web audio has issues, when you don't connect the analyser output\n\t\tthis.processingNode.connect(this.gainNode);\n\t\tthis.gainNode.connect(this.audioContext.destination);\n\t}\n\n\tprivate disconnect() {\n\t\tif (this.inputNode) {\n\t\t\tthis.inputNode.disconnect();\n\t\t}\n\t\tthis.analyserNode.disconnect();\n\t\tthis.processingNode.disconnect();\n\t\tthis.gainNode.disconnect();\n\t}\n\n\tprivate audioProcessingCallback = (audioProcessingEvent: AudioProcessingEvent) => {\n\t\tconst dataArray = new Float32Array(this.analyserNode.frequencyBinCount);\n\t\tvoid this.analyserNode.getFloatFrequencyData(dataArray);\n\n\t\tif (this.onFloatFrequencyData) {\n\t\t\tthis.onFloatFrequencyData(dataArray, audioProcessingEvent.timeStamp);\n\t\t}\n\t};\n}\n\nexport default WebAudioEngine;\n\nasync function createStreamSource(audioContext: AudioContext): Promise<MediaStreamAudioSourceNode> {\n\tconst mediaStreamConstraints: any = { audio: { echoCancellation: false, noiseSuppression: false } };\n\tconst mediaStream = await navigator.mediaDevices.getUserMedia(mediaStreamConstraints);\n\tconst mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);\n\treturn mediaStreamSource;\n}\n\n// for debugging purposes\nasync function createBufferSource(audioContext: AudioContext): Promise<AudioBufferSourceNode> {\n\taudioContext.resume(); // XXX: seems to fix issues\n\tconst sourceFileURL = \"example.mp3\";\n\tconst audioBuffer = await getAudioBufferFromURL(sourceFileURL, audioContext);\n\tconst bufferSourceNode = audioContext.createBufferSource();\n\tbufferSourceNode.buffer = audioBuffer;\n\tbufferSourceNode.start(); // just start it right away, enough for testing purposes\n\treturn bufferSourceNode;\n}\n\nasync function getAudioBufferFromURL(url: string, audioContext: AudioContext): Promise<AudioBuffer> {\n\tconst response = await fetch(url);\n\tconst arrayBuffer = await response.arrayBuffer();\n\n\t// decodeAudiData() is browser-specific (promise vs. callback)\n\tif (!!(window as any).webkitAudioContext) {\n\t\treturn new Promise<AudioBuffer>((resolve, reject) => {\n\t\t\taudioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\t\t});\n\t} else {\n\t\treturn audioContext.decodeAudioData(arrayBuffer);\n\t}\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport OnsetDetection from '../lib/OnsetDetection';\nimport { getRandomColor } from '../lib/helpers';\nimport ControlPanel from '../components/ControlPanel';\n\nimport * as actions from \"../actions\";\nimport WebAudioEngine from 'src/lib/AudioEngine/WebAudioEngine';\n\nconst propTypes = {\n    autoThresholdIsActive: PropTypes.bool.isRequired,\n    onsetDetectionIsRunning: PropTypes.bool.isRequired,\n    setNewRandomColor: PropTypes.func.isRequired,\n    setOnsetData: PropTypes.func.isRequired,\n    setOnsetDetectionRunning: PropTypes.func.isRequired,\n    settingsAreVisible: PropTypes.bool.isRequired,\n    toggleSettingsVisibility: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    autoThresholdIsActive: state.onsetDetection.autoThresholdIsActive,\n    onsetDetectionIsRunning: state.onsetDetection.isRunning,\n    settingsAreVisible: state.settings.settingsAreVisible,\n    userThreshold: state.onsetDetection.userThreshold,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCanvasColor: (color) => {\n        dispatch(actions.setCanvasColor(color));\n    },\n    setNewRandomColor: () => {\n        const color = getRandomColor();\n        dispatch(actions.setCanvasColor(color));\n    },\n    setOnsetData: (onsetData) => {\n        dispatch(actions.setOnsetData(onsetData));\n    },\n    setOnsetDetectionRunning: (isRunning) => {\n        dispatch(actions.setOnsetDetectionRunning(isRunning));\n    },\n    toggleSettingsVisibility: () => {\n        dispatch(actions.toggleSettingsVisibility());\n    },\n});\n\nclass OnsetDetectionController extends Component {\n    static desiredBufferSize = 1024;\n    static refractoryTimeMS = 75;\n\n    constructor() {\n        super();\n        this.audioEngine = new WebAudioEngine(OnsetDetectionController.desiredBufferSize);\n        this.onsetDetection = new OnsetDetection(this.audioEngine.sampleRate, this.audioEngine.bufferSize, this.audioEngine.frequencyBinCount);\n    }\n\n    startAudioProcessing() {\n        this.audioEngine.onFloatFrequencyData = this.onsetDetection.run;\n        this.audioEngine.start();\n    }\n\n    stopAudioProcessing() {\n        this.audioEngine.stop();\n    }\n\n    componentDidMount() {\n        this.onsetDetection.onOnsetDetected = withRefractoryTime(OnsetDetectionController.refractoryTimeMS)(this.props.setNewRandomColor);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.onsetDetectionIsRunning !== this.props.onsetDetectionIsRunning) {\n            if (this.props.onsetDetectionIsRunning) {\n                this.startAudioProcessing();\n            } else {\n                this.stopAudioProcessing();\n            }\n        }\n        if (prevProps.autoThresholdIsActive !== this.props.autoThresholdIsActive) {\n            this.onsetDetection.shouldCalculateThreshold = this.props.autoThresholdIsActive;\n        }\n\n        if (prevProps.userThreshold !== this.props.userThreshold) {\n            this.onsetDetection.setThreshold(this.props.userThreshold);\n        }\n\n        if (prevProps.settingsAreVisible !== this.props.settingsAreVisible) {\n            if (this.props.settingsAreVisible) {\n                this.onsetDetection.onOnsetResultData = this.props.setOnsetData;\n            } else {\n                this.onsetDetection.onOnsetResultData = null\n            }\n        }\n    }\n\n    render() {\n        const {\n            onsetDetectionIsRunning,\n            setOnsetDetectionRunning,\n            toggleSettingsVisibility\n        } = this.props;\n\n        return (\n            <ControlPanel\n                onClickStartStop={(isRunning) => { setOnsetDetectionRunning(isRunning); }}\n                onClickSettings={toggleSettingsVisibility}\n                isRunning={onsetDetectionIsRunning}\n            />\n        );\n    }\n}\n\nOnsetDetectionController.propTypes = propTypes;\n\n// tslint:disable:no-console\n\nfunction withRefractoryTime(refactoryTime) {\n    return function (callback) {\n        let lastDetectionTimeStamp = 0;\n        return function (timeStamp) {\n            if ((timeStamp - lastDetectionTimeStamp) >= refactoryTime) {\n                callback();\n            }\n            lastDetectionTimeStamp = timeStamp;\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(OnsetDetectionController);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport SettingsOverlay from '../components/SettingsOverlay';\nimport OnsetDetectionController from '../components/OnsetDetectionController';\nimport * as actions from '../actions';\nimport { toggleFullScreen } from '../lib/helpers';\n\n\nconst propTypes = {\n    setSettingsVisibility: PropTypes.func.isRequired,\n    settingsAreVisible: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = ({ canvas, settings }) => ({\n    backgroundColor: canvas.currentColor,\n    settingsAreVisible: settings.settingsAreVisible,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setSettingsVisibility: (visible) => {\n        dispatch(actions.setSettingsVisibility(visible));\n    },\n});\n\nclass SpectralBeatMainView extends Component {\n    render() {\n        const { settingsAreVisible, backgroundColor } =  this.props;\n        return (\n            <div \n                style={{ backgroundColor, ...styles.main }}\n            >\n                <div style={styles.fullscreenButtonWrapper}>\n                    <img\n                        src={'fullscreen.png'}\n                        style={styles.fullscreenButton}\n                        onClick={toggleFullScreen}\n                    />\n                </div>\n\n                <div style={styles.settingsContainer} >\n                    {settingsAreVisible\n                        ? <SettingsOverlay />\n                        : null\n                    }\n                </div>\n                <div style={styles.controllerContainer}>\n                    <OnsetDetectionController />\n                </div>\n\n            </div>\n        )\n    }\n}\n\nSpectralBeatMainView.propTypes = propTypes;\n\nconst styles = {\n    controllerContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n    },\n    fullscreenButton: {\n        height: \"3em\",\n        width: \"3em\",\n    },\n    fullscreenButtonWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-end'\n    },\n    main: {\n        alignItems: 'stretch',\n        display: 'flex',\n        flexDirection: 'column',\n        fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\"Droid Sans\", \"Helvetica Neue\", sans-serif',\n        height: '100%',\n        justifyContent: 'space-between',\n        left: 0,\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n    },\n    settingsContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n    },\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(SpectralBeatMainView);\n","import * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport spectralBeatReducers from \"./reducers\";\nimport SpectralBeatMainView from \"./views/SpectralBeatMainView\";\n\nconst store = createStore(spectralBeatReducers);\n\nclass App extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t<SpectralBeatMainView />\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t  /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t// The URL constructor is available in all browsers that support SW.\n\tconst publicUrl = new URL(\n\t  process.env.PUBLIC_URL!,\n\t  window.location.toString()\n\t);\n\tif (publicUrl.origin !== window.location.origin) {\n\t  // Our service worker won't work if PUBLIC_URL is on a different origin\n\t  // from what our page is served on. This might happen if a CDN is used to\n\t  // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t  return;\n\t}\n\n\twindow.addEventListener('load', () => {\n\t  const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t  if (isLocalhost) {\n\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\tcheckValidServiceWorker(swUrl);\n\n\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t// service worker/PWA documentation.\n\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t  console.log(\n\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t  'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t  );\n\t\t});\n\t  } else {\n\t\t// Is not local host. Just register service worker\n\t\tregisterValidSW(swUrl);\n\t  }\n\t});\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n\t.register(swUrl)\n\t.then(registration => {\n\t  registration.onupdatefound = () => {\n\t\tconst installingWorker = registration.installing;\n\t\tif (installingWorker) {\n\t\t  installingWorker.onstatechange = () => {\n\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t  if (navigator.serviceWorker.controller) {\n\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t// It's the perfect time to display a 'New content is\n\t\t\t\t// available; please refresh.' message in your web app.\n\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t  } else {\n\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t// It's the perfect time to display a\n\t\t\t\t// 'Content is cached for offline use.' message.\n\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t  }\n\t\t\t}\n\t\t  };\n\t\t}\n\t  };\n\t})\n\t.catch(error => {\n\t  console.error('Error during service worker registration:', error);\n\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n\t.then(response => {\n\t  // Ensure service worker exists, and that we really are getting a JS file.\n\t  if (\n\t\tresponse.status === 404 ||\n\t\tresponse.headers.get('content-type')!.indexOf('javascript') === -1\n\t  ) {\n\t\t// No service worker found. Probably a different app. Reload the page.\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t  registration.unregister().then(() => {\n\t\t\twindow.location.reload();\n\t\t  });\n\t\t});\n\t  } else {\n\t\t// Service worker found. Proceed as normal.\n\t\tregisterValidSW(swUrl);\n\t  }\n\t})\n\t.catch(() => {\n\t  console.log(\n\t\t'No internet connection found. App is running in offline mode.'\n\t  );\n\t});\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n\tnavigator.serviceWorker.ready.then(registration => {\n\t  registration.unregister();\n\t});\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}